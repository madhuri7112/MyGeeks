#Sorting

# Bubble Sort

Bubble sort is a brute-force sorting algorithm which repeatedly steps through
a list comparing adjacent elements and swapping them if in the wrong order. It
continues to do this pass through until no more swaps are needed. Bubble sort
in almost all cases is a poor choice for sorting in real world applications
but since the algorithm doesn't manipulate anything on a pass where the data
is already sorted it is good to verify that an array is sorted. This differs
from other sorting techniques since they actually do their full sorting
behavior since it doesn't know differently.

An example of operations is as follows:

**First Pass**

[ `5` `1` 4 2 8 ] -> [ `1` `5` 4 2 8 ], Here, algorithm compares the first two elements, and swaps since 5 > 1. <br />
[ 1 `5` `4` 2 8 ] -> [ 1 `4` `5` 2 8 ], Swap since 5 > 4 <br />
[ 1 4 `5` `2` 8 ] -> [ 1 4 `2` `5` 8 ], Swap since 5 > 2 <br />
[ 1 4 2 `5` `8` ] -> [ 1 4 2 `5` `8` ], Now, since these elements are already in order [8 > 5], algorithm does not swap them.

**Second Pass**

[ `1` `4` 2 5 8 ] -> [ `1` `4` 2 5 8 ] <br />
[ 1 `4` `2` 5 8 ] -> [ 1 `2` `4` 5 8 ], Swap since 4 > 2 <br />
[ 1 2 `4` `5` 8 ] -> [ 1 2 `4` `5` 8 ] <br />
[ 1 2 4 `5` `8` ] -> [ 1 2 4 `5` `8` ]

Now, the array is already sorted, but the algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.

**Third Pass**

[ `1` `2` 4 5 8 ] -> [ `1` `2` 4 5 8 ] <br />
[ 1 `2` `4` 5 8 ] -> [ 1 `2` `4` 5 8 ] <br />
[ 1 2 `4` `5` 8 ] -> [ 1 2 `4` `5` 8 ] <br />
[ 1 2 4 `5` `8` ] -> [ 1 2 4 `5` `8` ]

## Time Complexity

| Case      | Complexity  |
| --------- |:-----------:|
| Worst     | `O(n^2)`    |
| Best      | `O(n)`      |
| Average   | `O(n^2)`    |


# Insertion Sort

This is an example of Insertion Sort. It takes a set of data starting at
the second index. As it moves through the array, it checks the values
before the current index for a value less than itself and if it finds it,
it inserts itself in that index. For example:

If we have a set: `[3, 1, 6, 0, 5]`

We start at index 1 with value 1.  We move backwards to index 0 and see that 3
is greater than 1. Since this is the beginning of the set we place our current
value (1) at index 0 and move the value at index 0 to index 1. Our new set is:

```
[1, 3, 6, 0, 5]
```

On the next iteration, we move to index 2 where we see the value is 6. We
check index 1 and 0 and see that both values are smaller than 6 so we don't
do anything. Our set remains the same:

```
[1, 3, 6, 0, 5]
```

On the third iteration, we start at index 3 and see the value 0. We check
the values at index 2, 1, and 0 and see that they are all larger than our
value so we move the set to the right and place our value at the front of
the set giving us a new set:

```
[0, 1, 3, 6, 5]
```

On our last iteration, we start at index 4 and see the value 5. We check
index 3 and see the value greater than 5 but at index 2 we see the value is
less than our value (3). We stop there, move the 6 over to the right and
place 5 in the index 4.

Our set is now sorted!

## Time Complexity

| Case      | Complexity |
| --------- |:----------:|
| Worst     | `O(n^2)`   |
| Best      | `O(n^2)`   |
| Average   | `O(n^2)`   |
